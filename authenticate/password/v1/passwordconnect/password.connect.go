// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: authenticate/password/v1/password.proto

package passwordconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/core-pb/authenticate/authenticate/password/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PasswordName is the fully-qualified name of the Password service.
	PasswordName = "authenticate.password.v1.Password"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PasswordCheckProcedure is the fully-qualified name of the Password's Check RPC.
	PasswordCheckProcedure = "/authenticate.password.v1.Password/Check"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	passwordServiceDescriptor     = v1.File_authenticate_password_v1_password_proto.Services().ByName("Password")
	passwordCheckMethodDescriptor = passwordServiceDescriptor.Methods().ByName("Check")
)

// PasswordClient is a client for the authenticate.password.v1.Password service.
type PasswordClient interface {
	Check(context.Context, *connect.Request[v1.CheckRequest]) (*connect.Response[v1.CheckResponse], error)
}

// NewPasswordClient constructs a client for the authenticate.password.v1.Password service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPasswordClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PasswordClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &passwordClient{
		check: connect.NewClient[v1.CheckRequest, v1.CheckResponse](
			httpClient,
			baseURL+PasswordCheckProcedure,
			connect.WithSchema(passwordCheckMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// passwordClient implements PasswordClient.
type passwordClient struct {
	check *connect.Client[v1.CheckRequest, v1.CheckResponse]
}

// Check calls authenticate.password.v1.Password.Check.
func (c *passwordClient) Check(ctx context.Context, req *connect.Request[v1.CheckRequest]) (*connect.Response[v1.CheckResponse], error) {
	return c.check.CallUnary(ctx, req)
}

// PasswordHandler is an implementation of the authenticate.password.v1.Password service.
type PasswordHandler interface {
	Check(context.Context, *connect.Request[v1.CheckRequest]) (*connect.Response[v1.CheckResponse], error)
}

// NewPasswordHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPasswordHandler(svc PasswordHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	passwordCheckHandler := connect.NewUnaryHandler(
		PasswordCheckProcedure,
		svc.Check,
		connect.WithSchema(passwordCheckMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/authenticate.password.v1.Password/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PasswordCheckProcedure:
			passwordCheckHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPasswordHandler returns CodeUnimplemented from all methods.
type UnimplementedPasswordHandler struct{}

func (UnimplementedPasswordHandler) Check(context.Context, *connect.Request[v1.CheckRequest]) (*connect.Response[v1.CheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authenticate.password.v1.Password.Check is not implemented"))
}
