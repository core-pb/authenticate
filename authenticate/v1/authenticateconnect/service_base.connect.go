// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: authenticate/v1/service_base.proto

package authenticateconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/core-pb/authenticate/authenticate/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BaseName is the fully-qualified name of the Base service.
	BaseName = "authenticate.v1.Base"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BaseListAuthenticateProcedure is the fully-qualified name of the Base's ListAuthenticate RPC.
	BaseListAuthenticateProcedure = "/authenticate.v1.Base/ListAuthenticate"
	// BaseAddAuthenticateProcedure is the fully-qualified name of the Base's AddAuthenticate RPC.
	BaseAddAuthenticateProcedure = "/authenticate.v1.Base/AddAuthenticate"
	// BaseSetAuthenticateProcedure is the fully-qualified name of the Base's SetAuthenticate RPC.
	BaseSetAuthenticateProcedure = "/authenticate.v1.Base/SetAuthenticate"
	// BaseDeleteAuthenticateProcedure is the fully-qualified name of the Base's DeleteAuthenticate RPC.
	BaseDeleteAuthenticateProcedure = "/authenticate.v1.Base/DeleteAuthenticate"
	// BaseGenerateProcedure is the fully-qualified name of the Base's Generate RPC.
	BaseGenerateProcedure = "/authenticate.v1.Base/Generate"
	// BaseSetTagProcedure is the fully-qualified name of the Base's SetTag RPC.
	BaseSetTagProcedure = "/authenticate.v1.Base/SetTag"
	// BaseDeleteTagProcedure is the fully-qualified name of the Base's DeleteTag RPC.
	BaseDeleteTagProcedure = "/authenticate.v1.Base/DeleteTag"
	// BaseAvailableTypeProcedure is the fully-qualified name of the Base's AvailableType RPC.
	BaseAvailableTypeProcedure = "/authenticate.v1.Base/AvailableType"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	baseServiceDescriptor                  = v1.File_authenticate_v1_service_base_proto.Services().ByName("Base")
	baseListAuthenticateMethodDescriptor   = baseServiceDescriptor.Methods().ByName("ListAuthenticate")
	baseAddAuthenticateMethodDescriptor    = baseServiceDescriptor.Methods().ByName("AddAuthenticate")
	baseSetAuthenticateMethodDescriptor    = baseServiceDescriptor.Methods().ByName("SetAuthenticate")
	baseDeleteAuthenticateMethodDescriptor = baseServiceDescriptor.Methods().ByName("DeleteAuthenticate")
	baseGenerateMethodDescriptor           = baseServiceDescriptor.Methods().ByName("Generate")
	baseSetTagMethodDescriptor             = baseServiceDescriptor.Methods().ByName("SetTag")
	baseDeleteTagMethodDescriptor          = baseServiceDescriptor.Methods().ByName("DeleteTag")
	baseAvailableTypeMethodDescriptor      = baseServiceDescriptor.Methods().ByName("AvailableType")
)

// BaseClient is a client for the authenticate.v1.Base service.
type BaseClient interface {
	ListAuthenticate(context.Context, *connect.Request[v1.ListAuthenticateRequest]) (*connect.Response[v1.ListAuthenticateResponse], error)
	AddAuthenticate(context.Context, *connect.Request[v1.AddAuthenticateRequest]) (*connect.Response[v1.AddAuthenticateResponse], error)
	SetAuthenticate(context.Context, *connect.Request[v1.SetAuthenticateRequest]) (*connect.Response[v1.SetAuthenticateResponse], error)
	DeleteAuthenticate(context.Context, *connect.Request[v1.DeleteAuthenticateRequest]) (*connect.Response[v1.DeleteAuthenticateResponse], error)
	Generate(context.Context, *connect.Request[v1.GenerateRequest]) (*connect.Response[v1.GenerateResponse], error)
	SetTag(context.Context, *connect.Request[v1.SetTagRequest]) (*connect.Response[v1.SetTagResponse], error)
	DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error)
	AvailableType(context.Context, *connect.Request[v1.AvailableTypeRequest]) (*connect.Response[v1.AvailableTypeResponse], error)
}

// NewBaseClient constructs a client for the authenticate.v1.Base service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBaseClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BaseClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &baseClient{
		listAuthenticate: connect.NewClient[v1.ListAuthenticateRequest, v1.ListAuthenticateResponse](
			httpClient,
			baseURL+BaseListAuthenticateProcedure,
			connect.WithSchema(baseListAuthenticateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addAuthenticate: connect.NewClient[v1.AddAuthenticateRequest, v1.AddAuthenticateResponse](
			httpClient,
			baseURL+BaseAddAuthenticateProcedure,
			connect.WithSchema(baseAddAuthenticateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setAuthenticate: connect.NewClient[v1.SetAuthenticateRequest, v1.SetAuthenticateResponse](
			httpClient,
			baseURL+BaseSetAuthenticateProcedure,
			connect.WithSchema(baseSetAuthenticateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAuthenticate: connect.NewClient[v1.DeleteAuthenticateRequest, v1.DeleteAuthenticateResponse](
			httpClient,
			baseURL+BaseDeleteAuthenticateProcedure,
			connect.WithSchema(baseDeleteAuthenticateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		generate: connect.NewClient[v1.GenerateRequest, v1.GenerateResponse](
			httpClient,
			baseURL+BaseGenerateProcedure,
			connect.WithSchema(baseGenerateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setTag: connect.NewClient[v1.SetTagRequest, v1.SetTagResponse](
			httpClient,
			baseURL+BaseSetTagProcedure,
			connect.WithSchema(baseSetTagMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteTag: connect.NewClient[v1.DeleteTagRequest, v1.DeleteTagResponse](
			httpClient,
			baseURL+BaseDeleteTagProcedure,
			connect.WithSchema(baseDeleteTagMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		availableType: connect.NewClient[v1.AvailableTypeRequest, v1.AvailableTypeResponse](
			httpClient,
			baseURL+BaseAvailableTypeProcedure,
			connect.WithSchema(baseAvailableTypeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// baseClient implements BaseClient.
type baseClient struct {
	listAuthenticate   *connect.Client[v1.ListAuthenticateRequest, v1.ListAuthenticateResponse]
	addAuthenticate    *connect.Client[v1.AddAuthenticateRequest, v1.AddAuthenticateResponse]
	setAuthenticate    *connect.Client[v1.SetAuthenticateRequest, v1.SetAuthenticateResponse]
	deleteAuthenticate *connect.Client[v1.DeleteAuthenticateRequest, v1.DeleteAuthenticateResponse]
	generate           *connect.Client[v1.GenerateRequest, v1.GenerateResponse]
	setTag             *connect.Client[v1.SetTagRequest, v1.SetTagResponse]
	deleteTag          *connect.Client[v1.DeleteTagRequest, v1.DeleteTagResponse]
	availableType      *connect.Client[v1.AvailableTypeRequest, v1.AvailableTypeResponse]
}

// ListAuthenticate calls authenticate.v1.Base.ListAuthenticate.
func (c *baseClient) ListAuthenticate(ctx context.Context, req *connect.Request[v1.ListAuthenticateRequest]) (*connect.Response[v1.ListAuthenticateResponse], error) {
	return c.listAuthenticate.CallUnary(ctx, req)
}

// AddAuthenticate calls authenticate.v1.Base.AddAuthenticate.
func (c *baseClient) AddAuthenticate(ctx context.Context, req *connect.Request[v1.AddAuthenticateRequest]) (*connect.Response[v1.AddAuthenticateResponse], error) {
	return c.addAuthenticate.CallUnary(ctx, req)
}

// SetAuthenticate calls authenticate.v1.Base.SetAuthenticate.
func (c *baseClient) SetAuthenticate(ctx context.Context, req *connect.Request[v1.SetAuthenticateRequest]) (*connect.Response[v1.SetAuthenticateResponse], error) {
	return c.setAuthenticate.CallUnary(ctx, req)
}

// DeleteAuthenticate calls authenticate.v1.Base.DeleteAuthenticate.
func (c *baseClient) DeleteAuthenticate(ctx context.Context, req *connect.Request[v1.DeleteAuthenticateRequest]) (*connect.Response[v1.DeleteAuthenticateResponse], error) {
	return c.deleteAuthenticate.CallUnary(ctx, req)
}

// Generate calls authenticate.v1.Base.Generate.
func (c *baseClient) Generate(ctx context.Context, req *connect.Request[v1.GenerateRequest]) (*connect.Response[v1.GenerateResponse], error) {
	return c.generate.CallUnary(ctx, req)
}

// SetTag calls authenticate.v1.Base.SetTag.
func (c *baseClient) SetTag(ctx context.Context, req *connect.Request[v1.SetTagRequest]) (*connect.Response[v1.SetTagResponse], error) {
	return c.setTag.CallUnary(ctx, req)
}

// DeleteTag calls authenticate.v1.Base.DeleteTag.
func (c *baseClient) DeleteTag(ctx context.Context, req *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error) {
	return c.deleteTag.CallUnary(ctx, req)
}

// AvailableType calls authenticate.v1.Base.AvailableType.
func (c *baseClient) AvailableType(ctx context.Context, req *connect.Request[v1.AvailableTypeRequest]) (*connect.Response[v1.AvailableTypeResponse], error) {
	return c.availableType.CallUnary(ctx, req)
}

// BaseHandler is an implementation of the authenticate.v1.Base service.
type BaseHandler interface {
	ListAuthenticate(context.Context, *connect.Request[v1.ListAuthenticateRequest]) (*connect.Response[v1.ListAuthenticateResponse], error)
	AddAuthenticate(context.Context, *connect.Request[v1.AddAuthenticateRequest]) (*connect.Response[v1.AddAuthenticateResponse], error)
	SetAuthenticate(context.Context, *connect.Request[v1.SetAuthenticateRequest]) (*connect.Response[v1.SetAuthenticateResponse], error)
	DeleteAuthenticate(context.Context, *connect.Request[v1.DeleteAuthenticateRequest]) (*connect.Response[v1.DeleteAuthenticateResponse], error)
	Generate(context.Context, *connect.Request[v1.GenerateRequest]) (*connect.Response[v1.GenerateResponse], error)
	SetTag(context.Context, *connect.Request[v1.SetTagRequest]) (*connect.Response[v1.SetTagResponse], error)
	DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error)
	AvailableType(context.Context, *connect.Request[v1.AvailableTypeRequest]) (*connect.Response[v1.AvailableTypeResponse], error)
}

// NewBaseHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBaseHandler(svc BaseHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	baseListAuthenticateHandler := connect.NewUnaryHandler(
		BaseListAuthenticateProcedure,
		svc.ListAuthenticate,
		connect.WithSchema(baseListAuthenticateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseAddAuthenticateHandler := connect.NewUnaryHandler(
		BaseAddAuthenticateProcedure,
		svc.AddAuthenticate,
		connect.WithSchema(baseAddAuthenticateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseSetAuthenticateHandler := connect.NewUnaryHandler(
		BaseSetAuthenticateProcedure,
		svc.SetAuthenticate,
		connect.WithSchema(baseSetAuthenticateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseDeleteAuthenticateHandler := connect.NewUnaryHandler(
		BaseDeleteAuthenticateProcedure,
		svc.DeleteAuthenticate,
		connect.WithSchema(baseDeleteAuthenticateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseGenerateHandler := connect.NewUnaryHandler(
		BaseGenerateProcedure,
		svc.Generate,
		connect.WithSchema(baseGenerateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseSetTagHandler := connect.NewUnaryHandler(
		BaseSetTagProcedure,
		svc.SetTag,
		connect.WithSchema(baseSetTagMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseDeleteTagHandler := connect.NewUnaryHandler(
		BaseDeleteTagProcedure,
		svc.DeleteTag,
		connect.WithSchema(baseDeleteTagMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	baseAvailableTypeHandler := connect.NewUnaryHandler(
		BaseAvailableTypeProcedure,
		svc.AvailableType,
		connect.WithSchema(baseAvailableTypeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/authenticate.v1.Base/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BaseListAuthenticateProcedure:
			baseListAuthenticateHandler.ServeHTTP(w, r)
		case BaseAddAuthenticateProcedure:
			baseAddAuthenticateHandler.ServeHTTP(w, r)
		case BaseSetAuthenticateProcedure:
			baseSetAuthenticateHandler.ServeHTTP(w, r)
		case BaseDeleteAuthenticateProcedure:
			baseDeleteAuthenticateHandler.ServeHTTP(w, r)
		case BaseGenerateProcedure:
			baseGenerateHandler.ServeHTTP(w, r)
		case BaseSetTagProcedure:
			baseSetTagHandler.ServeHTTP(w, r)
		case BaseDeleteTagProcedure:
			baseDeleteTagHandler.ServeHTTP(w, r)
		case BaseAvailableTypeProcedure:
			baseAvailableTypeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBaseHandler returns CodeUnimplemented from all methods.
type UnimplementedBaseHandler struct{}

func (UnimplementedBaseHandler) ListAuthenticate(context.Context, *connect.Request[v1.ListAuthenticateRequest]) (*connect.Response[v1.ListAuthenticateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authenticate.v1.Base.ListAuthenticate is not implemented"))
}

func (UnimplementedBaseHandler) AddAuthenticate(context.Context, *connect.Request[v1.AddAuthenticateRequest]) (*connect.Response[v1.AddAuthenticateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authenticate.v1.Base.AddAuthenticate is not implemented"))
}

func (UnimplementedBaseHandler) SetAuthenticate(context.Context, *connect.Request[v1.SetAuthenticateRequest]) (*connect.Response[v1.SetAuthenticateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authenticate.v1.Base.SetAuthenticate is not implemented"))
}

func (UnimplementedBaseHandler) DeleteAuthenticate(context.Context, *connect.Request[v1.DeleteAuthenticateRequest]) (*connect.Response[v1.DeleteAuthenticateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authenticate.v1.Base.DeleteAuthenticate is not implemented"))
}

func (UnimplementedBaseHandler) Generate(context.Context, *connect.Request[v1.GenerateRequest]) (*connect.Response[v1.GenerateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authenticate.v1.Base.Generate is not implemented"))
}

func (UnimplementedBaseHandler) SetTag(context.Context, *connect.Request[v1.SetTagRequest]) (*connect.Response[v1.SetTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authenticate.v1.Base.SetTag is not implemented"))
}

func (UnimplementedBaseHandler) DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authenticate.v1.Base.DeleteTag is not implemented"))
}

func (UnimplementedBaseHandler) AvailableType(context.Context, *connect.Request[v1.AvailableTypeRequest]) (*connect.Response[v1.AvailableTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authenticate.v1.Base.AvailableType is not implemented"))
}
